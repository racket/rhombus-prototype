#lang rhombus

import:
  lib("racket/flonum.rkt").flvector
  "partial-order.rkt" open
  "Lexicographic.rhm".Lexicographic

class UnredRatio(n :: Integer, d :: PositiveInteger):
  private implements PartialOrder
  private override partial_compare(other :: UnredRatio, recur):
    recur(n * other.d, other.n * d)

check UnredRatio(1, 2) =~ UnredRatio(2, 4) ~is #true
check UnredRatio(1, 2) =~ UnredRatio(3, 4) ~is #false
check UnredRatio(1, 2) <~ UnredRatio(3, 4) ~is #true
check UnredRatio(1, 2) <~ UnredRatio(1, 4) ~is #false
check UnredRatio(1, 2) >~ UnredRatio(1, 4) ~is #true
check:
  [UnredRatio(1, 2), UnredRatio(-1, 2)] <~ [UnredRatio(3, 4), UnredRatio(-1, 4)]
  ~is #true
check:
  [UnredRatio(1, 2), UnredRatio(-1, 2)] >~ [UnredRatio(1, 4), UnredRatio(-3, 4)]
  ~is #true

check:
  Lexicographic(UnredRatio(1, 2), UnredRatio(-1, 2)) <~ Lexicographic(UnredRatio(3, 4), UnredRatio(-1, 4))
  ~is #true
check:
  Lexicographic(UnredRatio(1, 2), UnredRatio(-1, 2)) >~ Lexicographic(UnredRatio(1, 4), UnredRatio(-3, 4))
  ~is #true

check: Lexicographic(5, 8, 3, 13, 2) =~ Lexicographic(5, 8, 3, 13, 2) ~is #true
check: Lexicographic(5, 8, 3, 13, 2) =~ Lexicographic(5, 8, 3, 13, 2, -1) ~is #false
check: Lexicographic(5, 8, 3, 13, 2) !=~ Lexicographic(5, 8, 3, 13, 2, -1) ~is #true
check: Lexicographic(5, 8, 3, 13, 2) <=~ Lexicographic(5, 8, 3, 13, 2, -1) ~is #true
check: Lexicographic(5, 8, 3, 13, 2) <~ Lexicographic(5, 8, 3, 13, 2, -1) ~is #true
check: Lexicographic(5, 8, 3, 13, 2) <=~ Lexicographic(5, 8, 2, 13, 2, -1) ~is #false
check: Lexicographic(5, 8, 3, 13, 2) >=~ Lexicographic(5, 8, 2, 13, 2, -1) ~is #true
check: Lexicographic(5, 8, 3, 13, 2) >~ Lexicographic(5, 8, 2, 13, 2, -1) ~is #true
check: Lexicographic(5, 8, 3, 13, 2) >=~ Lexicographic(6, -1) ~is #false
check: Lexicographic(5, 8, 3, 13, 2) <=~ Lexicographic(6, -1) ~is #true
check: Lexicographic(5, 8, 3, 13, 2) <~ Lexicographic(6, -1) ~is #true
check: Lexicographic(5, 8, 3, 13, 2) <=~ Lexicographic(4, 18) ~is #false
check: Lexicographic(5, 8, 3, 13, 2) >=~ Lexicographic(4, 18) ~is #true
check: Lexicographic(5, 8, 3, 13, 2) >~ Lexicographic(4, 18) ~is #true

check: PartialOrder.within([6, 10], [6.02, 9.99], 0.05) ~is #true
check: PartialOrder.within({#'C: 20, #'F: 68}, {#'C: 25, #'F: 77}, 10) ~is #true

check: PartialOrder.within([6e+23, 10.0], [6.02e+23, 9.8], 0.05) ~is #false
check: PartialOrder.within({#'C: 18, #'F: 64}, {#'C: 25, #'F: 77}, 10) ~is #false

check: #nan =~ #nan ~is #false
check: #nan !=~ #nan ~is #true
check: #nan <~ #nan ~is #false
check: #nan <=~ #nan ~is #false

class AlwaysNaN():
  private implements PartialOrder
  private override partial_compare(_, _): #nan

let NaNish: AlwaysNaN()
check: NaNish =~ NaNish ~is #false
check: NaNish !=~ NaNish ~is #true
check: NaNish <~ NaNish ~is #false
check: NaNish <=~ NaNish ~is #false

class Baddie(value):
  private implements PartialOrder
  private override partial_compare(_, _):
    error(#'Baddie, "never compare me to anything!")

check: [1, Baddie(1)] =~ [2, Baddie(2)] ~is #false
check: [1, Baddie(1)] !=~ [2, Baddie(2)] ~is #true
check: [1, Baddie(1)] >=~ [2, Baddie(2)] ~is #false
check: [1, Baddie(1)] >~ [2, Baddie(2)] ~is #false
check: [2, Baddie(1)] <=~ [1, Baddie(2)] ~is #false
check: [2, Baddie(1)] <~ [1, Baddie(2)] ~is #false

check: flvector(0.0) =~ flvector(-0.0) ~is #true
check: flvector(0.0, -0.0) =~ flvector(-0.0, 0.0) ~is #true
check: flvector(0.0, 1.0) =~ flvector(-0.0, 2.0) ~is #false
check: flvector(0.0, 1.0) !=~ flvector(-0.0, 2.0) ~is #true
check: flvector(0.0, 1.0) <=~ flvector(-0.0, 2.0) ~is #true
check: flvector(0.0, 1.0) <~ flvector(-0.0, 2.0) ~is #true
check: flvector(2.0, -0.0) <=~ flvector(1.0, 0.0) ~is #false
check: flvector(2.0, -0.0) >=~ flvector(1.0, 0.0) ~is #true
check: flvector(2.0, -0.0) >~ flvector(1.0, 0.0) ~is #true

check: flvector(1.0, 20.0) <~ flvector(2.0, 10.0) ~is #false
check: flvector(1.0, 20.0) <=~ flvector(2.0, 10.0) ~is #false
check: flvector(1.0, 20.0) >~ flvector(2.0, 10.0) ~is #false
check: flvector(1.0, 20.0) >=~ flvector(2.0, 10.0) ~is #false
check: flvector(1.0, 20.0) =~ flvector(2.0, 10.0) ~is #false
check: flvector(1.0, 20.0) !=~ flvector(2.0, 10.0) ~is #true

check: flvector() <=~ flvector(0.0) ~is #false
check: flvector(1.0, 10.0) <=~ flvector(2.0, 20.0, 200.0) ~is #false

